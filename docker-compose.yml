services:
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - app-network

  mongo1:
    image: mongo:6.0.5
    container_name: mongo1
    command: ["--replSet", "rs", "--bind_ip_all"]
    ports:
      - "27017:27017"
    volumes:
      - mongo1_data:/data/db
    networks:
      - app-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  mongo2:
    image: mongo:6.0.5
    container_name: mongo2
    command: ["--replSet", "rs", "--bind_ip_all"]
    ports:
      - "27018:27017"
    volumes:
      - mongo2_data:/data/db
    networks:
      - app-network
    depends_on:
      - mongo1

  mongo3:
    image: mongo:6.0.5
    container_name: mongo3
    command: ["--replSet", "rs", "--bind_ip_all"]
    ports:
      - "27019:27017"
    volumes:
      - mongo3_data:/data/db
    networks:
      - app-network
    depends_on:
      - mongo1

  mongo-init:
    image: mongo:6.0.5
    container_name: mongo-init
    restart: "no"
    depends_on:
      mongo1:
        condition: service_healthy
    command: >
      mongosh --host mongo1:27017 --eval '
        rs.initiate({
          _id: "rs",
          members: [
            {_id: 0, host: "mongo1:27017"},
            {_id: 1, host: "mongo2:27017"},
            {_id: 2, host: "mongo3:27017"}
          ]
        });'
    networks:
      - app-network

  api:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=development
      - PORT=4000
      - DATABASE_URL=mongodb://mongo1:27017,mongo2:27017,mongo3:27017/boilerplate_hub?replicaSet=rs
      - REDIS_URL=redis://redis:6379
    depends_on:
      mongo1:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  redis_data:
  mongo1_data:
  mongo2_data:
  mongo3_data: