type Boilerplate {
  id: ID!
  title: String!
  description: String!
  repositoryUrl: String!
  framework: String!
  language: String!
  tags: [String!]!
  stars: Int!
  downloads: Int!
  author: User!
  authorId: String!
  files: [File!]!
  createdAt: String!
  updatedAt: String!
  likedBy: [User!]!
}

type File {
  name: String!
  path: String!
  content: String!
  type: String!
}

type BoilerplateConnection {
  edges: [BoilerplateEdge!]!
  pageInfo: PageInfo!
}

type BoilerplateEdge {
  node: Boilerplate!
  cursor: String!
}

extend type Query {
  boilerplate(id: ID!): Boilerplate
  boilerplates(
    first: Int
    after: String
    where: BoilerplateWhereInput
    orderBy: BoilerplateOrderByInput
  ): BoilerplateConnection!
}

extend type Mutation {
  createBoilerplate(data: CreateBoilerplateInput!): Boilerplate! @auth
  updateBoilerplate(id: ID!, data: UpdateBoilerplateInput!): Boilerplate! @auth
  deleteBoilerplate(id: ID!): Boolean! @auth
  likeBoilerplate(id: ID!): Boilerplate! @auth
  unlikeBoilerplate(id: ID!): Boilerplate! @auth
}

input BoilerplateWhereInput {
  title: String
  description: String
  framework: String
  language: String
  tags: [String!]
  authorId: String
}

input BoilerplateOrderByInput {
  title: Sort
  stars: Sort
  downloads: Sort
  createdAt: Sort
  updatedAt: Sort
}

enum Sort {
  asc
  desc
}

input CreateBoilerplateInput {
  title: String!
  description: String!
  repositoryUrl: String!
  framework: String!
  language: String!
  tags: [String!]!
  files: [FileInput!]!
}

input UpdateBoilerplateInput {
  title: String
  description: String
  repositoryUrl: String
  framework: String
  language: String
  tags: [String!]
  files: [FileInput!]
}

input FileInput {
  name: String!
  path: String!
  content: String!
  type: String!
}