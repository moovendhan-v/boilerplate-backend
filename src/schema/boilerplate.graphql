scalar Upload

type Boilerplate {
  id: ID!
  title: String!
  description: String!
  repositoryUrl: String!
  framework: String!
  language: String!
  tags: [String!]!
  stars: Int!
  downloads: Int!
  author: User!
  authorId: String!
  files: [File!]!
  createdAt: String!
  updatedAt: String!
  likedBy: [User!]!
}

type File {
  name: String!
  path: String!
  content: String!
  type: String!
}

type User {
  id: ID!
  name: String!
  email: String!
  avatar: String
  role: String!
}

type AuthPayload {
  id: ID!
  email: String!
  name: String!
  role: String!
  token: String!
}

type Category {
  id: ID!
  name: String!
  slug: String!
  icon: String!
  color: String!
  description: String!
}

type Query {
  boilerplate(id: ID!): Boilerplate
  
  # Get users who liked a boilerplate
  likedBy(boilerplateId: ID!): [String!]!
  
  # Get all categories
  categories: [Category!]!
  
  # Keep the original cursor-based pagination
  boilerplates(
    first: Int
    after: String
    where: BoilerplateWhereInput
    orderBy: BoilerplateOrderByInput
  ): BoilerplateConnection!
  
  # Add offset-based pagination as an alternative query
  allBoilerplates(
    skip: Int
    take: Int
    where: BoilerplateWhereInput
    orderBy: BoilerplateOrderByInput
  ): [Boilerplate!]!
}

# Cursor-based pagination types
type BoilerplateConnection {
  edges: [BoilerplateEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type BoilerplateEdge {
  node: Boilerplate!
  cursor: String!
}

type PageInfo {
  hasNextPage: Boolean!
  endCursor: String
}

type Mutation {
  createBoilerplate(data: CreateBoilerplateInput!): Boilerplate! @auth
  updateBoilerplate(id: ID!, data: UpdateBoilerplateInput!): Boilerplate! @auth
  deleteBoilerplate(id: ID!): Boolean! @auth
  likeBoilerplate(id: ID!): Boilerplate! @auth
  unlikeBoilerplate(id: ID!): Boilerplate! @auth
  login(input: LoginInput!): AuthPayload!
  signup(input: SignupInput!): AuthPayload!
  createUser(input: CreateUserInput!): AuthPayload!
}

input BoilerplateWhereInput {
  title: String
  description: String
  framework: String
  language: String
  tags: [String!]
  authorId: String
}

input BoilerplateOrderByInput {
  title: Sort
  stars: Sort
  downloads: Sort
  createdAt: Sort
  updatedAt: Sort
}

enum Sort {
  asc
  desc
}

# Upload scalar for file uploads
input CreateBoilerplateInput {
  title: String!
  description: String!
  repositoryUrl: String!
  framework: String
  language: String!
  tags: [String!]!
  files: [FileInput!]
  zipFile: Upload 
  category: String!
}

input UpdateBoilerplateInput {
  title: String
  description: String
  repositoryUrl: String
  framework: String
  language: String
  tags: [String!]
  files: [FileInput!]
}

input FileInput {
  name: String!
  path: String!
  content: String!
  type: String!
}

directive @auth on FIELD_DEFINITION

input LoginInput {
  email: String!
  password: String!
}

input CreateUserInput {
  email: String!
  password: String!
  name: String
  role: String
}

input SignupInput {
  name: String!
  email: String!
  password: String!
}